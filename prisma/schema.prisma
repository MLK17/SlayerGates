generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model User {
  id                  Int                     @id @default(autoincrement())
  pseudo              String                  @unique @db.VarChar(50)
  email               String                  @unique @db.VarChar(255)
  password            String                  @db.VarChar(255)
  role                String                  @default("user") @db.VarChar(20)
  avatar              String?                 @db.VarChar(255)
  created_at          DateTime                @default(now())
  tournaments_created Tournament[]            @relation("TournamentCreator")
  teams_captain       Team[]                  @relation("TeamCaptain")
  team_memberships    TeamMember[]
  join_requests       TeamJoinRequest[]       @relation("UserRequests")
}

model Tournament {
  id               Int              @id @default(autoincrement())
  title            String           @db.VarChar(100)
  game             String           @db.VarChar(100)
  description      String
  format           String           @db.VarChar(50)
  max_players      Int              // Nombre maximum d'équipes
  players_per_team Int              // Nombre de joueurs par équipe
  is_online        Boolean          @default(true)
  location         String?          @db.VarChar(255)
  start_date       DateTime
  end_date         DateTime?
  status           String           @default("upcoming")
  created_at       DateTime         @default(now())
  creator_id       Int
  matches          Match[]
  creator          User             @relation("TournamentCreator", fields: [creator_id], references: [id])
  teams            TournamentTeam[]
}

model Match {
  id             Int        @id @default(autoincrement())
  tournament_id  Int
  round          Int
  team1_id       Int
  team2_id       Int
  winner_id      Int?
  score          String?    @db.VarChar(50)
  status         String     @default("pending")
  scheduled_time DateTime?
  completed_time DateTime?
  created_at     DateTime   @default(now())
  tournament     Tournament @relation(fields: [tournament_id], references: [id])
  team1          Team      @relation("Team1Matches", fields: [team1_id], references: [id])
  team2          Team      @relation("Team2Matches", fields: [team2_id], references: [id])
}

model School {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  city        String
  teams       Team[]
  created_at  DateTime @default(now())
}

model Team {
  id            Int               @id @default(autoincrement())
  name          String
  description   String?
  school_id     Int
  captain_id    Int
  logo          String?
  created_at    DateTime         @default(now())
  school        School           @relation(fields: [school_id], references: [id])
  captain       User             @relation("TeamCaptain", fields: [captain_id], references: [id])
  members       TeamMember[]
  tournaments   TournamentTeam[]
  join_requests TeamJoinRequest[] @relation("TeamRequests")
  team1_matches Match[]          @relation("Team1Matches")
  team2_matches Match[]          @relation("Team2Matches")
  leaderboard   Leaderboard?

  @@unique([name, school_id])
}

model TeamMember {
  id          Int      @id @default(autoincrement())
  team_id     Int
  user_id     Int
  role        String   @default("member") // "captain", "member"
  joined_at   DateTime @default(now())
  team        Team     @relation(fields: [team_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])

  @@unique([team_id, user_id])
}

model TournamentTeam {
  tournament_id Int
  team_id      Int
  registered_at DateTime   @default(now())
  participating_players Int[] // IDs des joueurs participants
  tournament   Tournament @relation(fields: [tournament_id], references: [id])
  team         Team       @relation(fields: [team_id], references: [id])

  @@id([tournament_id, team_id])
}

model TeamJoinRequest {
  id         Int      @id @default(autoincrement())
  team_id    Int
  user_id    Int
  status     String   @default("PENDING") // "PENDING", "APPROVED", "REJECTED"
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  team       Team     @relation("TeamRequests", fields: [team_id], references: [id])
  user       User     @relation("UserRequests", fields: [user_id], references: [id])

  @@unique([team_id, user_id])
}

model Leaderboard {
  id         Int      @id @default(autoincrement())
  team_id    Int      @unique
  points     Int      @default(0)
  wins       Int      @default(0)
  losses     Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  team       Team     @relation(fields: [team_id], references: [id])
}
